/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/api/embeddings": {
    /**
     * エンベディングの一覧
     * @description ESRE UI で利用可能なエンベディングの一覧を取得します。
     *
     * 取得した model_id は、チームを作成する際に、そのチームで利用するエンベディングを指定する際に利用します。
     *
     * 取得できるエンベディングには、以下のものが含まれます。
     * - モデルリストに登録されているエンベディング (e.g. kserve, AWS, Azure)
     * - Elasticsearch 上にデプロイされたエンベディング (e.g. e5)
     * - Configurable Models で設定されたエンベディング
     */
    get: operations["get_embeddings_api_embeddings_get"];
  };
  "/api/llm_models": {
    /**
     * LLM の一覧
     * @description ESRE UI で利用可能な LLM の一覧を取得します。
     *
     * 取得した model_id は、LLM (`/api/llm/stream`) や RAG (`/api/rag/stream`) を実行する際に指定します。
     *
     * 取得できる LLM には、以下のものが含まれます。
     * - モデルリストに登録されている LLM (e.g. kserve, AWS, Azure)
     * - Configurable Models で設定された LLM
     */
    get: operations["get_llm_models_api_llm_models_get"];
  };
  "/api/configurable_models": {
    /**
     * Configurable Model の一覧
     * @description Configurable Model の一覧を取得します。
     *
     * Configurable Model は、 LLM やエンベディングを追加する機能です。
     * Azure への接続情報やモデルの設定を ESRE UI に登録することで、RAG 実行に登録した LLM を使用できます。
     * また、ドキュメントアップロード時に使うエンベディングを追加することもできます。
     *
     * `task_type` に `chat` を指定すると LLM の一覧を取得します。
     * `task_type` に `embedding` を指定するとエンベディングの一覧を取得します。
     */
    get: operations["get_configurable_models_api_configurable_models_get"];
    /**
     * Configurable Model の登録
     * @description Configurable Model を新規登録します。
     *
     * LLM を登録する場合は `task_type` に `chat` を指定し、エンベディングを登録する場合は `embedding` を指定します。
     *
     * `model_class` には、 `task_type` が `chat` の場合は `langchain_openai.chat_models.azure.AzureChatOpenAI` が設定できます。
     * `embedding` の場合は `langchain_openai.embeddings.azure.AzureOpenAIEmbeddings` が設定できます。
     *
     * `parameters` には、 `model_class` で指定したクラスのコンストラクタに渡すパラメータを JSON 形式で指定します。
     * 例として、Azure Chat の場合は以下のように指定します。
     *
     * ```json
     * {
     *   "deployment_name": "gpt-4-32k",
     *   "azure_endpoint": "https://azure-domain.com",
     *   "api_version": "2024-02-15-preview",
     *   "temperature": 0.5,
     *   "api_key": "接続に使用する API キーを指定"
     * }
     * ```
     *
     * エンベディングの場合は以下のように指定します。
     * ```json
     * {
     *   "deployment": "text-embedding-3-large",
     *   "azure_endpoint": "https://azure-domain.com",
     *   "api_version": "2024-02-15-preview",
     *   "api_key": "接続に使用する API キーを指定"
     * }
     * ```
     *
     * 設定できるパラメータの詳細は、 LangChain のドキュメントを参照してください。
     * - [AzureChatOpenAI](https://python.langchain.com/v0.2/api_reference/openai/chat_models/langchain_openai.chat_models.azure.AzureChatOpenAI.html#langchain_openai.chat_models.azure.AzureChatOpenAI)
     * - [AzureOpenAIEmbeddings](https://python.langchain.com/v0.2/api_reference/openai/embeddings/langchain_openai.embeddings.azure.AzureOpenAIEmbeddings.html#langchain_openai.embeddings.azure.AzureOpenAIEmbeddings)
     */
    post: operations["post_configurable_model_api_configurable_models_post"];
  };
  "/api/configurable_models/{model_id}": {
    /**
     * Configurable Model の削除
     * @description 指定した model_id の Configurable Model を削除します。
     *
     * 削除した Configurable Model の LLM を使ったチャットは、履歴の参照はできますが、新規投稿が出来なくなります。新規投稿するためには LLM を変更する必要があります。
     * また、削除した Configurable Model のエンベディングを使っているチームでは、ドキュメントのアップロードや RAG 実行ができなくなります。
     */
    delete: operations["post_configurable_model_api_configurable_models__model_id__delete"];
    /**
     * Configurable Model の更新
     * @description 指定した model_id の Configurable Model を更新します。
     * ただし、`task_type` の変更はできないため、`task_type` を変更したい場合は新規作成してください。
     */
    patch: operations["patch_configurable_model_api_configurable_models__model_id__patch"];
  };
  "/api/llm/stream": {
    /**
     * LLM 応答のストリーミング
     * @description RAG を使用しない、LLM のみによる応答を得るためのエンドポイントです。
     *
     * この API からは、[Server-Sent Events (SSE)](https://developer.mozilla.org/ja/docs/Web/API/Server-sent_events/Using_server-sent_events) によるストリーミングレスポンスが返されます。
     *
     * `llm_model_id` に指定された LLM モデルを使用して、`input` に指定された文章に対する応答を得ることができます。
     *
     * `history` にそれまでの会話履歴を指定することで、会話の続きの応答を得ることができます (会話履歴はサーバーサイドでは保存していないため、クライアントサイドで保持する必要があります)。
     */
    post: operations["llm_stream_api_llm_stream_post"];
  };
  "/api/rag/stream": {
    /**
     * RAG 応答のストリーミング
     * @description RAG による応答を得るためのエンドポイントです。
     *
     * この API からは、[Server-Sent Events (SSE)](https://developer.mozilla.org/ja/docs/Web/API/Server-sent_events/Using_server-sent_events) によるストリーミングレスポンスが返されます。
     *
     * `llm_model_id` に指定された LLM モデルを使用して、`input` に指定された文章に対する応答を得ることができます。
     *
     * `history` にそれまでの会話履歴を指定することで、会話の続きの応答を得ることができます (会話履歴はサーバーサイドでは保存していないため、クライアントサイドで保持する必要があります)。
     *
     * `team_id` には、ドキュメントの検索対象となるチームの ID を指定します。
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、チームの参照権限が必要です。参照権限を持たない場合、404 エラーが返されます。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームに対して RAG を実行できます。
     *
     * `strategy` に RAG で使用する検索方法を指定します (`fulltext`, `vector`, `hybrid`)。
     *
     * `settings_id` には、プロンプト設定の ID を指定します。省略した場合は "global" が使用されます。
     *
     * `prompt_template`, `document_template`, `document_separator`, `size` は、プロンプト設定を上書きするためのパラメータです。省略した場合は `settings_id` で指定した設定の値が使用されます。
     */
    post: operations["rag_stream_api_rag_stream_post"];
  };
  "/api/search": {
    /**
     * 検索のみ実行
     * @description Elasticsearch に対して、 `query` で指定された文字列を使ってクエリを実行し、検索結果を返します。
     *
     * `team_id` には、ドキュメントの検索対象となるチームの ID を指定します。
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、チームの参照権限が必要です。参照権限を持たない場合、404 エラーが返されます。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームに対して RAG を実行できます。
     *
     * `size` は検索結果を何件返すかを指定します。
     */
    get: operations["search_api_search_get"];
  };
  "/api/settings": {
    /**
     * 設定の一覧
     * @description プロンプト設定の一覧を取得します。
     *
     * 一覧の `id` を使って、RAG 実行時に使用するプロンプト設定を指定できます。
     *
     * 特別な設定として、 `id` が `global` の設定があります。この設定は削除できず、RAG 実行時に設定 ID を指定しない場合に使用されます。
     */
    get: operations["get_settings_list_api_settings_get"];
    /**
     * 設定の新規作成
     * @description プロンプト設定を新規作成します。
     *
     * `id` には半角英数字で任意の ID を設定します。ID は重複できません。
     *
     * `name`, `description` には、設定の名前と説明を設定します。これらはプロンプトには使用されず、画面表示のためだけに使用されます。
     *
     * `prompt_template`, `document_template`, `document_separator` には、それぞれプロンプトの形式、ドキュメントの形式、ドキュメントの区切り文字を設定します。これらはプロンプト生成時に使用されます。
     *
     * `size` には、検索時に取得するドキュメントの数を設定します。
     * この件数のドキュメントが、プロンプトの中にコンテキストとして含まれます。
     * 最終的に生成されるプロンプトが LLM のコンテキストサイズを超えない範囲で設定する必要があります。
     */
    post: operations["post_settings_api_settings_post"];
  };
  "/api/settings/{settings_id}": {
    /** 設定の詳細 */
    get: operations["get_settings_api_settings__settings_id__get"];
    /**
     * 設定の削除
     * @description `settings_id` で指定したプロンプト設定を削除します。ただし、 `global` は削除できません。
     */
    delete: operations["delete_settings_api_settings__settings_id__delete"];
    /**
     * 設定の更新
     * @description `settings_id` で指定したプロンプト設定を更新します。
     */
    patch: operations["patch_settings_api_settings__settings_id__patch"];
  };
  "/api/teams": {
    /**
     * チームの一覧
     * @description チームの一覧を取得します。
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限のあるチームのみが一覧に含まれます。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、すべてのチームが一覧に含まれます。
     */
    get: operations["get_teams_api_teams_get"];
    /**
     * チームの新規作成
     * @description チームを新規作成します。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、作成したチームの `owner_email` に、リクエストを送信したユーザーのメールアドレスが設定されます。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、`owner_email` に `ELASTICSEARCH_USER` 環境変数の値が設定されます。
     */
    post: operations["post_team_api_teams_post"];
  };
  "/api/teams/{team_id}": {
    /**
     * チームの詳細
     * @description `team_id` で指定したチームを取得します。
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを取得できます。
     */
    get: operations["get_team_api_teams__team_id__get"];
    /**
     * チームの削除
     * @description `team_id` で指定したチームを削除します。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを削除できます。
     */
    delete: operations["delete_team_api_teams__team_id__delete"];
    /**
     * チームの更新
     * @description `team_id` で指定したチームの情報を更新します。
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを更新できます。
     */
    patch: operations["patch_team_api_teams__team_id__patch"];
  };
  "/api/teams/{team_id}/files": {
    /**
     * ファイルの一覧
     * @description `team_id` で指定したチームにアップロードされたファイルの一覧を取得します。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームのファイル一覧を取得できます。
     *
     * `status` にはファイルの処理状態が設定されます。処理状態には `init`, `chunking`, `embedding`, `done`, `error` があります。
     * - `init`: ファイルがアップロードされた直後で、処理が開始されていない状態
     * - `chunking`: ファイルを `chunk_size` で指定された文字数で区切る処理をしている状態
     * - `embedding`: チャンク分けされたファイルのエンベディングを計算している状態
     * - `done`: すべての処理が完了した状態
     * - `error`: 処理中にエラーが発生した状態
     */
    get: operations["get_files_api_teams__team_id__files_get"];
    /**
     * ファイルのアップロード
     * @description `team_id` で指定したチームにファイルをアップロードします。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームにファイルをアップロードできます。
     *
     * この API はファイルのバイナリを送信する都合上、`Content-Type: multipart/form-data` でリクエストを送信する必要があります。
     * `file` パラメータにファイル本体を指定し、 `metadata` パラメータ内にファイルに関する情報を JSON 文字列で指定します。
     *
     * `metadata` に含むパラメータは以下の通りです。
     * - `filename`: ファイル名
     * - `name`: ファイル名 (未使用)
     * - `url`: ファイルの取得元 URL。検索結果にこの URL が参考情報として表示されます。
     * - `chunk_size`: チャンクサイズ。この文字数でファイルを分割します。RAG 実行時に分割したチャンクが検索されます。
     */
    post: operations["post_file_api_teams__team_id__files_post"];
  };
  "/api/teams/{team_id}/files/{file_id}": {
    /**
     * ファイルの削除
     * @description `team_id` で指定したチーム内にある、 `file_id` のファイル情報を削除します。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームのファイルを削除できます。
     */
    delete: operations["delete_file_api_teams__team_id__files__file_id__delete"];
    /**
     * ファイルの更新
     * @description `team_id` で指定したチーム内にある、 `file_id` のファイル情報を更新します。
     *
     * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
     * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームにあるファイル情報を更新できます。
     */
    patch: operations["patch_file_api_teams__team_id__files__file_id__patch"];
  };
  "/": {
    /**
     * トップページ
     * @description トップページの HTML を返します。このパスは REST API の一部ではありません。
     */
    get: operations["index__get"];
  };
  "/auth/callback": {
    /**
     * OIDC 認証コールバック
     * @description OIDC 認証のコールバックエンドポイントです。
     */
    get: operations["auth_callback_auth_callback_get"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** Body_post_file_api_teams__team_id__files_post */
    Body_post_file_api_teams__team_id__files_post: {
      /**
       * File
       * Format: binary
       */
      file: string;
      metadata: components["schemas"]["FilePost"];
    };
    /**
     * ChatModelClass
     * @constant
     * @enum {string}
     */
    ChatModelClass: "langchain_openai.chat_models.azure.AzureChatOpenAI";
    /** ConfigurableModelGetResult */
    ConfigurableModelGetResult: {
      /** Name */
      name: string;
      /** Model Id */
      model_id: string;
      /** Model Class */
      model_class: components["schemas"]["ChatModelClass"] | components["schemas"]["EmbeddingModelClass"];
      task_type: components["schemas"]["TaskType"];
      /** Parameters */
      parameters: Record<string, never>;
    };
    /** ConfigurableModelPatch */
    ConfigurableModelPatch: {
      /** Name */
      name: string;
      /** Model Class */
      model_class: components["schemas"]["ChatModelClass"] | components["schemas"]["EmbeddingModelClass"];
      /** Parameters */
      parameters: {
        [key: string]: string | number;
      };
    };
    /** ConfigurableModelPost */
    ConfigurableModelPost: {
      /** Name */
      name: string;
      task_type: components["schemas"]["TaskType"];
      /** Model Class */
      model_class: components["schemas"]["ChatModelClass"] | components["schemas"]["EmbeddingModelClass"];
      /** Parameters */
      parameters: {
        [key: string]: string | number;
      };
    };
    /** DocumentOut */
    DocumentOut: {
      /** Page Content */
      page_content: string;
      /** Metadata */
      metadata: Record<string, never>;
    };
    /**
     * EmbeddingModelClass
     * @constant
     * @enum {string}
     */
    EmbeddingModelClass: "langchain_openai.embeddings.azure.AzureOpenAIEmbeddings";
    /** EmbeddingModelGetResult */
    EmbeddingModelGetResult: {
      /** Model Id */
      model_id: string;
      /** Name */
      name: string;
      /**
       * Type
       * @enum {string}
       */
      type: "elasticsearch" | "configurable" | "kserve" | "aws_bedrock" | "azure_openai";
    };
    /** FileGetResult */
    FileGetResult: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Url */
      url: string;
      /** Filename */
      filename: string;
      /** Team Id */
      team_id: string;
      /** Status */
      status: string;
      /** Chunk Size */
      chunk_size: number;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** FilePatch */
    FilePatch: {
      /** Url */
      url: string;
    };
    /** FilePost */
    FilePost: {
      /** Filename */
      filename: string;
      /** Name */
      name: string;
      /** Url */
      url: string;
      /** Chunk Size */
      chunk_size: number;
    };
    /** FilePostResult */
    FilePostResult: {
      /** Name */
      name: string;
      /** Url */
      url: string;
      /** Filename */
      filename: string;
      /** Team Id */
      team_id: string;
      /** Status */
      status: string;
      /**
       * Created At
       * Format: date-time
       */
      created_at: string;
      /**
       * Updated At
       * Format: date-time
       */
      updated_at: string;
    };
    /** HTTPValidationError */
    HTTPValidationError: {
      /** Detail */
      detail?: components["schemas"]["ValidationError"][];
    };
    /** LLMModelGetResult */
    LLMModelGetResult: {
      /** Name */
      name: string;
      /** Model Id */
      model_id: string;
      /**
       * Type
       * @enum {string}
       */
      type: "configurable" | "kserve" | "aws_bedrock" | "azure_openai";
    };
    /** LLMParameters */
    LLMParameters: {
      /** Team Id */
      team_id: string;
      /** Llm Model Id */
      llm_model_id: string;
      /**
       * History
       * @default []
       */
      history?: components["schemas"]["MessageDict"][];
      /** Input */
      input: string;
    };
    /** MessageDict */
    MessageDict: {
      /**
       * Role
       * @enum {string}
       */
      role: "human" | "user" | "ai" | "assistant" | "system";
      /** Content */
      content: string;
    };
    /** PromptIn */
    PromptIn: {
      /** Prompt Template */
      prompt_template?: string | null;
      /** Document Template */
      document_template?: string | null;
      /** Document Separator */
      document_separator?: string | null;
    };
    /** PromptOut */
    PromptOut: {
      /** Prompt Template */
      prompt_template: string;
      /** Document Template */
      document_template: string;
      /** Document Separator */
      document_separator: string;
    };
    /** RAGParameters */
    RAGParameters: {
      /** Team Id */
      team_id: string;
      /** Llm Model Id */
      llm_model_id: string;
      /** Settings Id */
      settings_id: string | null;
      /**
       * History
       * @default []
       */
      history?: components["schemas"]["MessageDict"][];
      /** Input */
      input: string;
      /** Prompt Template */
      prompt_template: string | null;
      /** Document Template */
      document_template: string | null;
      /** Document Separator */
      document_separator: string | null;
      /** Size */
      size: number | null;
      /**
       * Strategy
       * @default fulltext
       * @enum {string}
       */
      strategy?: "fulltext" | "vector" | "hybrid";
    };
    /** RetrievalIn */
    RetrievalIn: {
      /** Size */
      size?: number | null;
    };
    /** RetrievalOut */
    RetrievalOut: {
      /** Size */
      size: number;
    };
    /** SearchResult */
    SearchResult: {
      /** Fulltext */
      fulltext: components["schemas"]["DocumentOut"][];
      /** Vector */
      vector: components["schemas"]["DocumentOut"][];
      /** Hybrid */
      hybrid: components["schemas"]["DocumentOut"][];
    };
    /** SettingsIn */
    SettingsIn: {
      /** Name */
      name: string;
      /** Description */
      description: string;
      prompt?: components["schemas"]["PromptIn"] | null;
      retrieval?: components["schemas"]["RetrievalIn"] | null;
    };
    /** SettingsOut */
    SettingsOut: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Description */
      description: string;
      prompt: components["schemas"]["PromptOut"];
      retrieval: components["schemas"]["RetrievalOut"];
    };
    /**
     * TaskType
     * @enum {string}
     */
    TaskType: "chat" | "embedding";
    /** TeamOut */
    TeamOut: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Embedding Model */
      embedding_model: string;
      /** Owner Email */
      owner_email: string;
      /** Country Regex */
      country_regex: string;
      /** Company Regex */
      company_regex: string;
      /** Department Regex */
      department_regex: string;
      /** Title Regex */
      title_regex: string;
      /** Email Regex */
      email_regex: string;
    };
    /** TeamPatch */
    TeamPatch: {
      /** Name */
      name: string;
      /** Country Regex */
      country_regex: string;
      /** Company Regex */
      company_regex: string;
      /** Department Regex */
      department_regex: string;
      /** Title Regex */
      title_regex: string;
      /** Email Regex */
      email_regex: string;
    };
    /** TeamPost */
    TeamPost: {
      /** Id */
      id: string;
      /** Name */
      name: string;
      /** Embedding Model */
      embedding_model: string;
      /** Country Regex */
      country_regex: string;
      /** Company Regex */
      company_regex: string;
      /** Department Regex */
      department_regex: string;
      /** Title Regex */
      title_regex: string;
      /** Email Regex */
      email_regex: string;
    };
    /** ValidationError */
    ValidationError: {
      /** Location */
      loc: (string | number)[];
      /** Message */
      msg: string;
      /** Error Type */
      type: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * エンベディングの一覧
   * @description ESRE UI で利用可能なエンベディングの一覧を取得します。
   *
   * 取得した model_id は、チームを作成する際に、そのチームで利用するエンベディングを指定する際に利用します。
   *
   * 取得できるエンベディングには、以下のものが含まれます。
   * - モデルリストに登録されているエンベディング (e.g. kserve, AWS, Azure)
   * - Elasticsearch 上にデプロイされたエンベディング (e.g. e5)
   * - Configurable Models で設定されたエンベディング
   */
  get_embeddings_api_embeddings_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["EmbeddingModelGetResult"][];
        };
      },
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * LLM の一覧
   * @description ESRE UI で利用可能な LLM の一覧を取得します。
   *
   * 取得した model_id は、LLM (`/api/llm/stream`) や RAG (`/api/rag/stream`) を実行する際に指定します。
   *
   * 取得できる LLM には、以下のものが含まれます。
   * - モデルリストに登録されている LLM (e.g. kserve, AWS, Azure)
   * - Configurable Models で設定された LLM
   */
  get_llm_models_api_llm_models_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["LLMModelGetResult"][];
        };
      },
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Configurable Model の一覧
   * @description Configurable Model の一覧を取得します。
   *
   * Configurable Model は、 LLM やエンベディングを追加する機能です。
   * Azure への接続情報やモデルの設定を ESRE UI に登録することで、RAG 実行に登録した LLM を使用できます。
   * また、ドキュメントアップロード時に使うエンベディングを追加することもできます。
   *
   * `task_type` に `chat` を指定すると LLM の一覧を取得します。
   * `task_type` に `embedding` を指定するとエンベディングの一覧を取得します。
   */
  get_configurable_models_api_configurable_models_get: {
    parameters: {
      query: {
        task_type: components["schemas"]["TaskType"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["ConfigurableModelGetResult"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Configurable Model の登録
   * @description Configurable Model を新規登録します。
   *
   * LLM を登録する場合は `task_type` に `chat` を指定し、エンベディングを登録する場合は `embedding` を指定します。
   *
   * `model_class` には、 `task_type` が `chat` の場合は `langchain_openai.chat_models.azure.AzureChatOpenAI` が設定できます。
   * `embedding` の場合は `langchain_openai.embeddings.azure.AzureOpenAIEmbeddings` が設定できます。
   *
   * `parameters` には、 `model_class` で指定したクラスのコンストラクタに渡すパラメータを JSON 形式で指定します。
   * 例として、Azure Chat の場合は以下のように指定します。
   *
   * ```json
   * {
   *   "deployment_name": "gpt-4-32k",
   *   "azure_endpoint": "https://azure-domain.com",
   *   "api_version": "2024-02-15-preview",
   *   "temperature": 0.5,
   *   "api_key": "接続に使用する API キーを指定"
   * }
   * ```
   *
   * エンベディングの場合は以下のように指定します。
   * ```json
   * {
   *   "deployment": "text-embedding-3-large",
   *   "azure_endpoint": "https://azure-domain.com",
   *   "api_version": "2024-02-15-preview",
   *   "api_key": "接続に使用する API キーを指定"
   * }
   * ```
   *
   * 設定できるパラメータの詳細は、 LangChain のドキュメントを参照してください。
   * - [AzureChatOpenAI](https://python.langchain.com/v0.2/api_reference/openai/chat_models/langchain_openai.chat_models.azure.AzureChatOpenAI.html#langchain_openai.chat_models.azure.AzureChatOpenAI)
   * - [AzureOpenAIEmbeddings](https://python.langchain.com/v0.2/api_reference/openai/embeddings/langchain_openai.embeddings.azure.AzureOpenAIEmbeddings.html#langchain_openai.embeddings.azure.AzureOpenAIEmbeddings)
   */
  post_configurable_model_api_configurable_models_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigurableModelPost"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Configurable Model の削除
   * @description 指定した model_id の Configurable Model を削除します。
   *
   * 削除した Configurable Model の LLM を使ったチャットは、履歴の参照はできますが、新規投稿が出来なくなります。新規投稿するためには LLM を変更する必要があります。
   * また、削除した Configurable Model のエンベディングを使っているチームでは、ドキュメントのアップロードや RAG 実行ができなくなります。
   */
  post_configurable_model_api_configurable_models__model_id__delete: {
    parameters: {
      path: {
        model_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * Configurable Model の更新
   * @description 指定した model_id の Configurable Model を更新します。
   * ただし、`task_type` の変更はできないため、`task_type` を変更したい場合は新規作成してください。
   */
  patch_configurable_model_api_configurable_models__model_id__patch: {
    parameters: {
      path: {
        model_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ConfigurableModelPatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * LLM 応答のストリーミング
   * @description RAG を使用しない、LLM のみによる応答を得るためのエンドポイントです。
   *
   * この API からは、[Server-Sent Events (SSE)](https://developer.mozilla.org/ja/docs/Web/API/Server-sent_events/Using_server-sent_events) によるストリーミングレスポンスが返されます。
   *
   * `llm_model_id` に指定された LLM モデルを使用して、`input` に指定された文章に対する応答を得ることができます。
   *
   * `history` にそれまでの会話履歴を指定することで、会話の続きの応答を得ることができます (会話履歴はサーバーサイドでは保存していないため、クライアントサイドで保持する必要があります)。
   */
  llm_stream_api_llm_stream_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["LLMParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * RAG 応答のストリーミング
   * @description RAG による応答を得るためのエンドポイントです。
   *
   * この API からは、[Server-Sent Events (SSE)](https://developer.mozilla.org/ja/docs/Web/API/Server-sent_events/Using_server-sent_events) によるストリーミングレスポンスが返されます。
   *
   * `llm_model_id` に指定された LLM モデルを使用して、`input` に指定された文章に対する応答を得ることができます。
   *
   * `history` にそれまでの会話履歴を指定することで、会話の続きの応答を得ることができます (会話履歴はサーバーサイドでは保存していないため、クライアントサイドで保持する必要があります)。
   *
   * `team_id` には、ドキュメントの検索対象となるチームの ID を指定します。
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、チームの参照権限が必要です。参照権限を持たない場合、404 エラーが返されます。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームに対して RAG を実行できます。
   *
   * `strategy` に RAG で使用する検索方法を指定します (`fulltext`, `vector`, `hybrid`)。
   *
   * `settings_id` には、プロンプト設定の ID を指定します。省略した場合は "global" が使用されます。
   *
   * `prompt_template`, `document_template`, `document_separator`, `size` は、プロンプト設定を上書きするためのパラメータです。省略した場合は `settings_id` で指定した設定の値が使用されます。
   */
  rag_stream_api_rag_stream_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["RAGParameters"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 検索のみ実行
   * @description Elasticsearch に対して、 `query` で指定された文字列を使ってクエリを実行し、検索結果を返します。
   *
   * `team_id` には、ドキュメントの検索対象となるチームの ID を指定します。
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、チームの参照権限が必要です。参照権限を持たない場合、404 エラーが返されます。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームに対して RAG を実行できます。
   *
   * `size` は検索結果を何件返すかを指定します。
   */
  search_api_search_get: {
    parameters: {
      query: {
        query: string;
        size: number;
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SearchResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 設定の一覧
   * @description プロンプト設定の一覧を取得します。
   *
   * 一覧の `id` を使って、RAG 実行時に使用するプロンプト設定を指定できます。
   *
   * 特別な設定として、 `id` が `global` の設定があります。この設定は削除できず、RAG 実行時に設定 ID を指定しない場合に使用されます。
   */
  get_settings_list_api_settings_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsOut"][];
        };
      },
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 設定の新規作成
   * @description プロンプト設定を新規作成します。
   *
   * `id` には半角英数字で任意の ID を設定します。ID は重複できません。
   *
   * `name`, `description` には、設定の名前と説明を設定します。これらはプロンプトには使用されず、画面表示のためだけに使用されます。
   *
   * `prompt_template`, `document_template`, `document_separator` には、それぞれプロンプトの形式、ドキュメントの形式、ドキュメントの区切り文字を設定します。これらはプロンプト生成時に使用されます。
   *
   * `size` には、検索時に取得するドキュメントの数を設定します。
   * この件数のドキュメントが、プロンプトの中にコンテキストとして含まれます。
   * 最終的に生成されるプロンプトが LLM のコンテキストサイズを超えない範囲で設定する必要があります。
   */
  post_settings_api_settings_post: {
    parameters: {
      query: {
        settings_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SettingsIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /** 設定の詳細 */
  get_settings_api_settings__settings_id__get: {
    parameters: {
      path: {
        settings_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["SettingsOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 設定の削除
   * @description `settings_id` で指定したプロンプト設定を削除します。ただし、 `global` は削除できません。
   */
  delete_settings_api_settings__settings_id__delete: {
    parameters: {
      path: {
        settings_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * 設定の更新
   * @description `settings_id` で指定したプロンプト設定を更新します。
   */
  patch_settings_api_settings__settings_id__patch: {
    parameters: {
      path: {
        settings_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SettingsIn"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * チームの一覧
   * @description チームの一覧を取得します。
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限のあるチームのみが一覧に含まれます。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、すべてのチームが一覧に含まれます。
   */
  get_teams_api_teams_get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOut"][];
        };
      },
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * チームの新規作成
   * @description チームを新規作成します。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、作成したチームの `owner_email` に、リクエストを送信したユーザーのメールアドレスが設定されます。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、`owner_email` に `ELASTICSEARCH_USER` 環境変数の値が設定されます。
   */
  post_team_api_teams_post: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamPost"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * チームの詳細
   * @description `team_id` で指定したチームを取得します。
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを取得できます。
   */
  get_team_api_teams__team_id__get: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * チームの削除
   * @description `team_id` で指定したチームを削除します。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを削除できます。
   */
  delete_team_api_teams__team_id__delete: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * チームの更新
   * @description `team_id` で指定したチームの情報を更新します。
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームを更新できます。
   */
  patch_team_api_teams__team_id__patch: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["TeamPatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["TeamOut"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ファイルの一覧
   * @description `team_id` で指定したチームにアップロードされたファイルの一覧を取得します。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームのファイル一覧を取得できます。
   *
   * `status` にはファイルの処理状態が設定されます。処理状態には `init`, `chunking`, `embedding`, `done`, `error` があります。
   * - `init`: ファイルがアップロードされた直後で、処理が開始されていない状態
   * - `chunking`: ファイルを `chunk_size` で指定された文字数で区切る処理をしている状態
   * - `embedding`: チャンク分けされたファイルのエンベディングを計算している状態
   * - `done`: すべての処理が完了した状態
   * - `error`: 処理中にエラーが発生した状態
   */
  get_files_api_teams__team_id__files_get: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FileGetResult"][];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ファイルのアップロード
   * @description `team_id` で指定したチームにファイルをアップロードします。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームにファイルをアップロードできます。
   *
   * この API はファイルのバイナリを送信する都合上、`Content-Type: multipart/form-data` でリクエストを送信する必要があります。
   * `file` パラメータにファイル本体を指定し、 `metadata` パラメータ内にファイルに関する情報を JSON 文字列で指定します。
   *
   * `metadata` に含むパラメータは以下の通りです。
   * - `filename`: ファイル名
   * - `name`: ファイル名 (未使用)
   * - `url`: ファイルの取得元 URL。検索結果にこの URL が参考情報として表示されます。
   * - `chunk_size`: チャンクサイズ。この文字数でファイルを分割します。RAG 実行時に分割したチャンクが検索されます。
   */
  post_file_api_teams__team_id__files_post: {
    parameters: {
      path: {
        team_id: string;
      };
    };
    requestBody: {
      content: {
        "multipart/form-data": components["schemas"]["Body_post_file_api_teams__team_id__files_post"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": components["schemas"]["FilePostResult"];
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ファイルの削除
   * @description `team_id` で指定したチーム内にある、 `file_id` のファイル情報を削除します。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームのファイルを削除できます。
   */
  delete_file_api_teams__team_id__files__file_id__delete: {
    parameters: {
      path: {
        team_id: string;
        file_id: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * ファイルの更新
   * @description `team_id` で指定したチーム内にある、 `file_id` のファイル情報を更新します。
   *
   * - `ENABLE_AUTHENTICATION` 環境変数が `true` の場合は、参照権限を持たない `team_id` を指定した場合 404 エラーになります。
   * - `ENABLE_AUTHENTICATION` 環境変数が `false` の場合は、任意のチームにあるファイル情報を更新できます。
   */
  patch_file_api_teams__team_id__files__file_id__patch: {
    parameters: {
      path: {
        team_id: string;
        file_id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["FilePatch"];
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
  /**
   * トップページ
   * @description トップページの HTML を返します。このパスは REST API の一部ではありません。
   */
  index__get: {
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
    };
  };
  /**
   * OIDC 認証コールバック
   * @description OIDC 認証のコールバックエンドポイントです。
   */
  auth_callback_auth_callback_get: {
    parameters: {
      query: {
        code: string;
        state: string;
      };
    };
    responses: {
      /** @description Successful Response */
      200: {
        content: {
          "text/html": string;
        };
      };
      /** @description Validation Error */
      422: {
        content: {
          "application/json": components["schemas"]["HTTPValidationError"];
        };
      };
    };
  };
}
